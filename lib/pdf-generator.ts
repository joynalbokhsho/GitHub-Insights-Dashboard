import jsPDF from 'jspdf'
import html2canvas from 'html2canvas'

interface DashboardData {
  type: 'dashboard'
  username: string
  generatedAt: string
  stats: {
    totalRepos: number
    totalStars: number
    totalForks: number
    totalIssues: number
    publicRepos: number
    privateRepos: number
    forkedRepos: number
    originalRepos: number
    followers: number
    following: number
    publicGists: number
    privateGists: number
  }
  languageStats: Array<{ name: string; value: number }>
  recentCommits: Array<any>
  topRepositories: Array<any>
}

interface RepositoryData {
  type: 'repositories'
  username: string
  generatedAt: string
  totalRepositories: number
  repositories: Array<any>
  summary: {
    public: number
    private: number
    forks: number
    original: number
    totalStars: number
    totalForks: number
  }
}

interface ContributionData {
  type: 'contributions'
  username: string
  generatedAt: string
  totalContributions: number
  contributionWeeks: Array<any>
  recentActivity: {
    issues: Array<any>
    pullRequests: Array<any>
    commits: Array<any>
  }
}

type ExportData = DashboardData | RepositoryData | ContributionData

// Color scheme
const COLORS = {
  primary: '#2563eb',
  secondary: '#64748b',
  accent: '#f59e0b',
  success: '#10b981',
  warning: '#f59e0b',
  danger: '#ef4444',
  light: '#f8fafc',
  dark: '#1e293b',
  border: '#e2e8f0',
  text: '#334155',
  textLight: '#64748b'
}

export async function generatePDF(data: ExportData): Promise<Blob> {
  const doc = new jsPDF('p', 'mm', 'a4')
  
  // Set proper font encoding for better character support
  doc.setFont('helvetica')
  
  const pageWidth = doc.internal.pageSize.getWidth()
  const pageHeight = doc.internal.pageSize.getHeight()
  const margin = 25
  const contentWidth = pageWidth - 2 * margin

  // Add gradient header background
  addGradientHeader(doc, pageWidth, pageHeight, margin)

  // Add header content
  doc.setFontSize(28)
  doc.setTextColor(255, 255, 255)
  doc.setFont('helvetica', 'bold')
  doc.text('GitHub Insights Report', margin, 45)
  
  doc.setFontSize(14)
  doc.setFont('helvetica', 'normal')
  doc.text(`Generated for: ${data.username}`, margin, 55)
  doc.text(`Generated on: ${new Date(data.generatedAt).toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })}`, margin, 62)

  let yPosition = 80

  switch (data.type) {
    case 'dashboard':
      yPosition = await generateDashboardPDF(doc, data, yPosition, margin, contentWidth)
      break
    case 'repositories':
      yPosition = await generateRepositoryPDF(doc, data, yPosition, margin, contentWidth)
      break
    case 'contributions':
      yPosition = await generateContributionPDF(doc, data, yPosition, margin, contentWidth)
      break
  }

  // Add footer
  addFooter(doc, pageWidth, pageHeight, margin)

  return doc.output('blob')
}

function addGradientHeader(doc: jsPDF, pageWidth: number, pageHeight: number, margin: number) {
  // Create gradient effect with multiple rectangles using different colors
  const gradientSteps = 10
  const headerHeight = 70
  
  for (let i = 0; i < gradientSteps; i++) {
    const y = i * (headerHeight / gradientSteps)
    const height = headerHeight / gradientSteps
    
    // Create a gradient effect by varying the blue intensity
    const blueIntensity = Math.floor(235 - (i / gradientSteps) * 50)
    doc.setFillColor(37, 99, blueIntensity)
    doc.rect(0, y, pageWidth, height, 'F')
  }
}

function addFooter(doc: jsPDF, pageWidth: number, pageHeight: number, margin: number) {
  const footerY = pageHeight - 20
  
  doc.setFillColor(COLORS.border)
  doc.rect(0, footerY - 1, pageWidth, 1, 'F')
  
  doc.setFontSize(10)
  doc.setTextColor(COLORS.textLight)
  doc.setFont('helvetica', 'normal')
  doc.text('Generated by GitHub Insights Dashboard', margin, footerY + 5)
  doc.text('github.com', pageWidth - margin - 20, footerY + 5, { align: 'right' })
}

async function generateDashboardPDF(
  doc: jsPDF, 
  data: DashboardData, 
  startY: number, 
  margin: number, 
  contentWidth: number
): Promise<number> {
  let y = startY
  const pageHeight = doc.internal.pageSize.getHeight()
  const minY = pageHeight - 40 // Leave space for footer

  // Overview Stats Cards
  y = addStatsCards(doc, data.stats, y, margin, contentWidth)
  y += 20

  // Check if we need a new page
  if (y > minY) {
    doc.addPage()
    addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
    y = 80
  }

  // Repository Breakdown
  y = addRepositoryBreakdown(doc, data.stats, y, margin, contentWidth)
  y += 20

  // Check if we need a new page
  if (y > minY) {
    doc.addPage()
    addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
    y = 80
  }

  // Top Languages
  if (data.languageStats.length > 0) {
    y = addLanguageSection(doc, data.languageStats, y, margin, contentWidth)
    y += 20
  }

  // Check if we need a new page
  if (y > minY) {
    doc.addPage()
    addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
    y = 80
  }

  // Top Repositories
  if (data.topRepositories.length > 0) {
    y = addTopRepositoriesSection(doc, data.topRepositories, y, margin, contentWidth)
    y += 20
  }

  // Check if we need a new page
  if (y > minY) {
    doc.addPage()
    addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
    y = 80
  }

  // Recent Commits
  if (data.recentCommits.length > 0) {
    y = addRecentCommitsSection(doc, data.recentCommits, y, margin, contentWidth)
  }

  return y
}

function addStatsCards(doc: jsPDF, stats: any, startY: number, margin: number, contentWidth: number): number {
  const cardHeight = 25
  const cardWidth = (contentWidth - 20) / 2
  const cards = [
    { label: 'Total Repositories', value: stats.totalRepos, color: COLORS.primary, icon: 'REPO' },
    { label: 'Total Stars', value: stats.totalStars, color: COLORS.accent, icon: 'STAR' },
    { label: 'Total Forks', value: stats.totalForks, color: COLORS.success, icon: 'FORK' },
    { label: 'Open Issues', value: stats.totalIssues, color: COLORS.warning, icon: 'ISSUE' },
    { label: 'Followers', value: stats.followers, color: COLORS.primary, icon: 'USERS' },
    { label: 'Following', value: stats.following, color: COLORS.secondary, icon: 'USER' },
  ]

  let y = startY
  let x = margin
  const pageHeight = doc.internal.pageSize.getHeight()
  const minY = pageHeight - 40

  // Section title
  doc.setFontSize(18)
  doc.setTextColor(COLORS.dark)
  doc.setFont('helvetica', 'bold')
  doc.text('Overview Statistics', margin, y)
  y += 15

  cards.forEach((card, index) => {
    // Check if we need a new page before adding cards
    if (y > minY - cardHeight) {
      doc.addPage()
      addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
      y = 80
      x = margin
    }

    if (index > 0 && index % 2 === 0) {
      y += cardHeight + 10
      x = margin
    }

    // Card background
    doc.setFillColor(COLORS.light)
    doc.roundedRect(x, y, cardWidth, cardHeight, 3, 3, 'F')
    
    // Card border
    doc.setDrawColor(card.color)
    doc.setLineWidth(0.5)
    doc.roundedRect(x, y, cardWidth, cardHeight, 3, 3, 'S')

    // Card content
    doc.setFontSize(12)
    doc.setTextColor(COLORS.text)
    doc.setFont('helvetica', 'normal')
    doc.text(card.label, x + 8, y + 8)
    
    doc.setFontSize(16)
    doc.setTextColor(card.color)
    doc.setFont('helvetica', 'bold')
    doc.text(card.value.toString(), x + 8, y + 18)
    
    // Icon (using text instead of emoji)
    doc.setFontSize(8)
    doc.setTextColor(COLORS.textLight)
    doc.text(card.icon, x + cardWidth - 20, y + 8)

    x += cardWidth + 10
  })

  return y + cardHeight + 15
}

function addRepositoryBreakdown(doc: jsPDF, stats: any, startY: number, margin: number, contentWidth: number): number {
  let y = startY
  const pageHeight = doc.internal.pageSize.getHeight()
  const minY = pageHeight - 40

  // Section title
  doc.setFontSize(18)
  doc.setTextColor(COLORS.dark)
  doc.setFont('helvetica', 'bold')
  doc.text('Repository Breakdown', margin, y)
  y += 15

  const breakdown = [
    { label: 'Public Repositories', value: stats.publicRepos, color: COLORS.success },
    { label: 'Private Repositories', value: stats.privateRepos, color: COLORS.warning },
    { label: 'Original Repositories', value: stats.originalRepos, color: COLORS.primary },
    { label: 'Forked Repositories', value: stats.forkedRepos, color: COLORS.secondary },
  ]

  const barWidth = contentWidth - 40
  const barHeight = 8
  const maxValue = Math.max(...breakdown.map(item => item.value))

  breakdown.forEach((item, index) => {
    // Check if we need a new page
    if (y > minY - 20) {
      doc.addPage()
      addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
      y = 80
    }

    const barY = y + index * 20
    
    // Label
    doc.setFontSize(11)
    doc.setTextColor(COLORS.text)
    doc.setFont('helvetica', 'normal')
    doc.text(item.label, margin, barY + 6)
    
    // Value
    doc.setFontSize(11)
    doc.setTextColor(item.color)
    doc.setFont('helvetica', 'bold')
    doc.text(item.value.toString(), margin + 120, barY + 6)
    
    // Progress bar background
    doc.setFillColor(COLORS.border)
    doc.rect(margin + 140, barY, barWidth, barHeight, 'F')
    
    // Progress bar fill
    const fillWidth = (item.value / maxValue) * barWidth
    doc.setFillColor(item.color)
    doc.rect(margin + 140, barY, fillWidth, barHeight, 'F')
    
    // Percentage
    const percentage = maxValue > 0 ? Math.round((item.value / maxValue) * 100) : 0
    doc.setFontSize(9)
    doc.setTextColor(COLORS.textLight)
    doc.text(`${percentage}%`, margin + 140 + barWidth + 5, barY + 6)
  })

  return y + breakdown.length * 20 + 10
}

function addLanguageSection(doc: jsPDF, languages: Array<{ name: string; value: number }>, startY: number, margin: number, contentWidth: number): number {
  let y = startY
  const pageHeight = doc.internal.pageSize.getHeight()
  const minY = pageHeight - 40

  // Section title
  doc.setFontSize(18)
  doc.setTextColor(COLORS.dark)
  doc.setFont('helvetica', 'bold')
  doc.text('Top Programming Languages', margin, y)
  y += 15

  const totalRepos = languages.reduce((sum, lang) => sum + lang.value, 0)
  const colors = [COLORS.primary, COLORS.success, COLORS.accent, COLORS.warning, COLORS.danger, COLORS.secondary]

  languages.slice(0, 6).forEach((lang, index) => {
    // Check if we need a new page
    if (y > minY - 15) {
      doc.addPage()
      addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
      y = 80
    }

    const percentage = Math.round((lang.value / totalRepos) * 100)
    const barWidth = (contentWidth - 60) * (lang.value / totalRepos)
    
    // Language name
    doc.setFontSize(11)
    doc.setTextColor(COLORS.text)
    doc.setFont('helvetica', 'normal')
    doc.text(lang.name, margin, y + 6)
    
    // Count
    doc.setFontSize(11)
    doc.setTextColor(colors[index % colors.length])
    doc.setFont('helvetica', 'bold')
    doc.text(lang.value.toString(), margin + 80, y + 6)
    
    // Progress bar
    doc.setFillColor(colors[index % colors.length])
    doc.rect(margin + 100, y, barWidth, 8, 'F')
    
    // Percentage
    doc.setFontSize(9)
    doc.setTextColor(COLORS.textLight)
    doc.text(`${percentage}%`, margin + 100 + barWidth + 5, y + 6)
    
    y += 15
  })

  return y
}

function addTopRepositoriesSection(doc: jsPDF, repositories: Array<any>, startY: number, margin: number, contentWidth: number): number {
  let y = startY
  const pageHeight = doc.internal.pageSize.getHeight()
  const minY = pageHeight - 40

  // Section title
  doc.setFontSize(18)
  doc.setTextColor(COLORS.dark)
  doc.setFont('helvetica', 'bold')
  doc.text('Top Repositories by Stars', margin, y)
  y += 15

  repositories.slice(0, 5).forEach((repo, index) => {
    // Check if we need a new page
    if (y > minY - 25) {
      doc.addPage()
      addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
      y = 80
    }

    // Repository card
    doc.setFillColor(COLORS.light)
    doc.roundedRect(margin, y, contentWidth, 20, 3, 3, 'F')
    doc.setDrawColor(COLORS.border)
    doc.setLineWidth(0.5)
    doc.roundedRect(margin, y, contentWidth, 20, 3, 3, 'S')

    // Repository name
    doc.setFontSize(12)
    doc.setTextColor(COLORS.primary)
    doc.setFont('helvetica', 'bold')
    doc.text(repo.name, margin + 8, y + 8)
    
    // Stars
    doc.setFontSize(11)
    doc.setTextColor(COLORS.accent)
    doc.setFont('helvetica', 'bold')
    doc.text(`STARS: ${repo.stargazers_count}`, margin + 8, y + 16)
    
    // Forks
    doc.setFontSize(10)
    doc.setTextColor(COLORS.textLight)
    doc.setFont('helvetica', 'normal')
    doc.text(`FORKS: ${repo.forks_count}`, margin + 60, y + 16)
    
    // Language
    if (repo.language) {
      doc.text(`LANG: ${repo.language}`, margin + 100, y + 16)
    }

    y += 25
  })

  return y
}

function addRecentCommitsSection(doc: jsPDF, commits: Array<any>, startY: number, margin: number, contentWidth: number): number {
  let y = startY
  const pageHeight = doc.internal.pageSize.getHeight()
  const minY = pageHeight - 40

  // Section title
  doc.setFontSize(18)
  doc.setTextColor(COLORS.dark)
  doc.setFont('helvetica', 'bold')
  doc.text('Recent Commits', margin, y)
  y += 15

  commits.slice(0, 5).forEach((commit, index) => {
    // Check if we need a new page
    if (y > minY - 30) {
      doc.addPage()
      addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
      y = 80
    }

    // Commit card
    doc.setFillColor(COLORS.light)
    doc.roundedRect(margin, y, contentWidth, 25, 3, 3, 'F')
    doc.setDrawColor(COLORS.border)
    doc.setLineWidth(0.5)
    doc.roundedRect(margin, y, contentWidth, 25, 3, 3, 'S')

    // Repository name
    doc.setFontSize(10)
    doc.setTextColor(COLORS.primary)
    doc.setFont('helvetica', 'bold')
    doc.text(commit.repository.name, margin + 8, y + 8)
    
    // Commit message
    const message = commit.commit.message.length > 60 
      ? commit.commit.message.substring(0, 60) + '...' 
      : commit.commit.message
    doc.setFontSize(9)
    doc.setTextColor(COLORS.text)
    doc.setFont('helvetica', 'normal')
    doc.text(message, margin + 8, y + 16)
    
    // Date
    const date = new Date(commit.commit.author.date).toLocaleDateString()
    doc.setFontSize(8)
    doc.setTextColor(COLORS.textLight)
    doc.text(date, margin + 8, y + 22)

    y += 30
  })

  return y
}

async function generateRepositoryPDF(
  doc: jsPDF, 
  data: RepositoryData, 
  startY: number, 
  margin: number, 
  contentWidth: number
): Promise<number> {
  let y = startY
  const pageHeight = doc.internal.pageSize.getHeight()
  const minY = pageHeight - 40

  // Summary Cards
  y = addRepositorySummaryCards(doc, data.summary, y, margin, contentWidth)
  y += 20

  // Check if we need a new page
  if (y > minY) {
    doc.addPage()
    addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
    y = 80
  }

  // Repository List
  y = addRepositoryList(doc, data.repositories, y, margin, contentWidth)

  return y
}

function addRepositorySummaryCards(doc: jsPDF, summary: any, startY: number, margin: number, contentWidth: number): number {
  let y = startY
  const pageHeight = doc.internal.pageSize.getHeight()
  const minY = pageHeight - 40

  // Section title
  doc.setFontSize(18)
  doc.setTextColor(COLORS.dark)
  doc.setFont('helvetica', 'bold')
  doc.text('Repository Summary', margin, y)
  y += 15

  const cards = [
    { label: 'Total Repositories', value: summary.public + summary.private, color: COLORS.primary },
    { label: 'Public Repositories', value: summary.public, color: COLORS.success },
    { label: 'Private Repositories', value: summary.private, color: COLORS.warning },
    { label: 'Original Repositories', value: summary.original, color: COLORS.primary },
    { label: 'Forked Repositories', value: summary.forks, color: COLORS.secondary },
    { label: 'Total Stars', value: summary.totalStars, color: COLORS.accent },
    { label: 'Total Forks', value: summary.totalForks, color: COLORS.success },
  ]

  const cardWidth = (contentWidth - 20) / 2
  let x = margin

  cards.forEach((card, index) => {
    // Check if we need a new page
    if (y > minY - 20) {
      doc.addPage()
      addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
      y = 80
      x = margin
    }

    if (index > 0 && index % 2 === 0) {
      y += 20
      x = margin
    }

    // Card background
    doc.setFillColor(COLORS.light)
    doc.roundedRect(x, y, cardWidth, 18, 3, 3, 'F')
    doc.setDrawColor(card.color)
    doc.setLineWidth(0.5)
    doc.roundedRect(x, y, cardWidth, 18, 3, 3, 'S')

    // Card content
    doc.setFontSize(10)
    doc.setTextColor(COLORS.text)
    doc.setFont('helvetica', 'normal')
    doc.text(card.label, x + 6, y + 8)
    
    doc.setFontSize(12)
    doc.setTextColor(card.color)
    doc.setFont('helvetica', 'bold')
    doc.text(card.value.toString(), x + 6, y + 14)

    x += cardWidth + 10
  })

  return y + 25
}

function addRepositoryList(doc: jsPDF, repositories: Array<any>, startY: number, margin: number, contentWidth: number): number {
  let y = startY
  const pageHeight = doc.internal.pageSize.getHeight()
  const minY = pageHeight - 40

  // Section title
  doc.setFontSize(18)
  doc.setTextColor(COLORS.dark)
  doc.setFont('helvetica', 'bold')
  doc.text('Repository Details', margin, y)
  y += 15

  repositories.slice(0, 15).forEach((repo, index) => {
    // Check if we need a new page
    if (y > minY - 40) {
      doc.addPage()
      addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
      y = 80
    }

    // Repository card
    doc.setFillColor(COLORS.light)
    doc.roundedRect(margin, y, contentWidth, 35, 3, 3, 'F')
    doc.setDrawColor(COLORS.border)
    doc.setLineWidth(0.5)
    doc.roundedRect(margin, y, contentWidth, 35, 3, 3, 'S')

    // Repository name
    doc.setFontSize(12)
    doc.setTextColor(COLORS.primary)
    doc.setFont('helvetica', 'bold')
    doc.text(repo.name, margin + 8, y + 8)
    
    // Language
    doc.setFontSize(9)
    doc.setTextColor(COLORS.text)
    doc.setFont('helvetica', 'normal')
    doc.text(`Language: ${repo.language || 'N/A'}`, margin + 8, y + 16)
    
    // Stats
    doc.text(`STARS: ${repo.stars} | FORKS: ${repo.forks} | ISSUES: ${repo.issues}`, margin + 8, y + 22)
    
    // Type
    const typeText = `${repo.isPrivate ? 'PRIVATE' : 'PUBLIC'} ${repo.isFork ? '(Fork)' : '(Original)'}`
    doc.text(typeText, margin + 8, y + 28)
    
    // Description
    if (repo.description) {
      const desc = repo.description.length > 80 ? repo.description.substring(0, 80) + '...' : repo.description
      doc.setFontSize(8)
      doc.setTextColor(COLORS.textLight)
      doc.text(desc, margin + 8, y + 34)
    }
    
    y += 40
  })

  return y
}

async function generateContributionPDF(
  doc: jsPDF, 
  data: ContributionData, 
  startY: number, 
  margin: number, 
  contentWidth: number
): Promise<number> {
  let y = startY
  const pageHeight = doc.internal.pageSize.getHeight()
  const minY = pageHeight - 40

  // Contribution Summary
  y = addContributionSummary(doc, data.totalContributions, y, margin, contentWidth)
  y += 20

  // Check if we need a new page
  if (y > minY) {
    doc.addPage()
    addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
    y = 80
  }

  // Recent Activity
  y = addRecentActivitySection(doc, data.recentActivity, y, margin, contentWidth)

  return y
}

function addContributionSummary(doc: jsPDF, totalContributions: number, startY: number, margin: number, contentWidth: number): number {
  let y = startY

  // Section title
  doc.setFontSize(18)
  doc.setTextColor(COLORS.dark)
  doc.setFont('helvetica', 'bold')
  doc.text('Contribution Summary', margin, y)
  y += 15

  // Large contribution number
  doc.setFillColor(COLORS.primary)
  doc.roundedRect(margin, y, contentWidth, 40, 8, 8, 'F')
  
  doc.setFontSize(24)
  doc.setTextColor(255, 255, 255)
  doc.setFont('helvetica', 'bold')
  doc.text('Total Contributions', margin + 15, y + 20)
  
  doc.setFontSize(32)
  doc.text(totalContributions.toString(), margin + 15, y + 35)

  return y + 50
}

function addRecentActivitySection(doc: jsPDF, activity: any, startY: number, margin: number, contentWidth: number): number {
  let y = startY
  const pageHeight = doc.internal.pageSize.getHeight()
  const minY = pageHeight - 40

  // Section title
  doc.setFontSize(18)
  doc.setTextColor(COLORS.dark)
  doc.setFont('helvetica', 'bold')
  doc.text('Recent Activity', margin, y)
  y += 15

  // Recent Issues
  if (activity.issues.length > 0) {
    y = addActivityItems(doc, 'Recent Issues', activity.issues, y, margin, contentWidth, COLORS.danger)
    y += 10
  }

  // Check if we need a new page
  if (y > minY) {
    doc.addPage()
    addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
    y = 80
  }

  // Recent Pull Requests
  if (activity.pullRequests.length > 0) {
    y = addActivityItems(doc, 'Recent Pull Requests', activity.pullRequests, y, margin, contentWidth, COLORS.success)
    y += 10
  }

  // Check if we need a new page
  if (y > minY) {
    doc.addPage()
    addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
    y = 80
  }

  // Recent Commits
  if (activity.commits.length > 0) {
    y = addActivityItems(doc, 'Recent Commits', activity.commits, y, margin, contentWidth, COLORS.primary)
  }

  return y
}

function addActivityItems(doc: jsPDF, title: string, items: Array<any>, startY: number, margin: number, contentWidth: number, color: string): number {
  let y = startY
  const pageHeight = doc.internal.pageSize.getHeight()
  const minY = pageHeight - 40

  // Subsection title
  doc.setFontSize(14)
  doc.setTextColor(color)
  doc.setFont('helvetica', 'bold')
  doc.text(title, margin, y)
  y += 10

  items.slice(0, 3).forEach((item, index) => {
    // Check if we need a new page
    if (y > minY - 25) {
      doc.addPage()
      addGradientHeader(doc, doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight(), margin)
      y = 80
    }

    // Activity card
    doc.setFillColor(COLORS.light)
    doc.roundedRect(margin, y, contentWidth, 20, 3, 3, 'F')
    doc.setDrawColor(color)
    doc.setLineWidth(0.5)
    doc.roundedRect(margin, y, contentWidth, 20, 3, 3, 'S')

    // Title
    const title = item.title || item.commit?.message || ''
    const displayTitle = title.length > 70 ? title.substring(0, 70) + '...' : title
    
    doc.setFontSize(10)
    doc.setTextColor(COLORS.text)
    doc.setFont('helvetica', 'normal')
    doc.text(displayTitle, margin + 8, y + 8)
    
    // Repository name
    if (item.repository) {
      doc.setFontSize(9)
      doc.setTextColor(color)
      doc.setFont('helvetica', 'bold')
      doc.text(item.repository.name, margin + 8, y + 16)
    }
    
    // Date
    const date = new Date(item.created_at || item.commit?.author?.date).toLocaleDateString()
    doc.setFontSize(8)
    doc.setTextColor(COLORS.textLight)
    doc.text(date, margin + contentWidth - 30, y + 16, { align: 'right' })

    y += 25
  })

  return y
}
